(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{354:function(a,n,s){"use strict";s.r(n);var t=s(3),v=Object(t.a)({},(function(){var a=this,n=a.$createElement,s=a._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"_1-编程语言类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-编程语言类型"}},[a._v("#")]),a._v(" 1.编程语言类型")]),a._v(" "),s("p",[a._v("编程语言按照数据类型,大体可以分为两类:")]),a._v(" "),s("ul",[s("li",[a._v("静态语言类型")]),a._v(" "),s("li",[a._v("动态语言类型")])]),a._v(" "),s("p",[a._v("静态语言: 编译时已确定变量的类型")]),a._v(" "),s("p",[a._v("动态语言: 变量类型要等到程序运行的时候,待变量被赋值后,才会具有某种类型.")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("优点:")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("静态语言: 编辑器可以帮我们提前避免运行程序期间有可能发生的错误.其次,在程序中明确规定了数据类型,编译器可以针对这些信息进行优化,题号程序执行速度.")])]),a._v(" "),s("li",[s("p",[a._v("动态语言: 编写的代码数量更少,看起来简洁,程序员可以把更多的尽力放在业务逻辑上.")])])])]),a._v(" "),s("li",[s("p",[a._v("缺点:")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("静态语言: 迫使程序员依照强契约来编写程序,类型的声明也会增加更多的代码,增加程序员的工作量.")])]),a._v(" "),s("li",[s("p",[a._v("动态语言: 无法保证变量的类型,所以在运行程序是有可能发生跟类型相关的错误")])])])])]),a._v(" "),s("h3",{attrs:{id:"javascript-动态类型语言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-动态类型语言"}},[a._v("#")]),a._v(" JavaScript  动态类型语言")]),a._v(" "),s("p",[a._v("在JavaScript 中, 当我们对一个变量赋值时,不需要考虑变量的类型,所以,JavaScript 是一门典型的动态类型语言.")]),a._v(" "),s("h2",{attrs:{id:"_2-多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-多态"}},[a._v("#")]),a._v(" 2.多态")]),a._v(" "),s("p",[a._v("含义: 同一操作作用于不同的对象上面,可以产生不同的解释和不同的执行结果.既给不同的对象发送同一个消息时,这些对象会根据这个消息分别给出不同的反馈.")]),a._v(" "),s("h4",{attrs:{id:"一段-多态-的javascript-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一段-多态-的javascript-代码"}},[a._v("#")]),a._v(" 一段'多态'的JavaScript 代码")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var makeSound = function (animal) {\n  if(animal instanceof Duck) {\n    console.log('嘎嘎嘎');\n  }else if (animal instanceof Chicken) {\n    console.log('咯咯咯')\n  }\n};\n\nvar Duck = function () {};\nvar Chicken = function () {};\n\nmakeSound(new Duck)    //嘎嘎嘎\nmakeSound(new Chicken) //咯咯咯\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br")])]),s("p",[a._v("但我们分别向鸭和鸡发出'叫唤'的消息时,他们都做出了不同的反应,提现了'多态性'.")]),a._v(" "),s("p",[a._v("但是这样的'多态性'存在问题,当我们增加一只动物时,我们要改动makeSound函数,既动物收到命令时,发出声音的方法.")]),a._v(" "),s("p",[a._v("当动物越多时,这个方法里面的内容越多,会变成一个巨大的函数,程序出错的可能性就越大.")]),a._v(" "),s("p",[a._v("多态背后的思想是将'做什么'和'谁去做以及怎么去做'分离开来,也就是将'不变的事物'与'可能改变的事物'分离开来.")]),a._v(" "),s("p",[a._v("在上面代码中 动物都会叫,这是不变的,但是不同类型的动物具体怎么叫是可变的.")]),a._v(" "),s("p",[a._v("所以我们要把不变的部分隔离出来,把可变的部分封装起来,赋予程序扩展的能力,看起来可生长,符合开发-封闭原则.")]),a._v(" "),s("h3",{attrs:{id:"对象的多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象的多态"}},[a._v("#")]),a._v(" 对象的多态")]),a._v(" "),s("p",[a._v("代码改写,隔离不变的部分,即所有的动物都会发出叫声:")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var makeSound = function (animal) {\n  animal.sound()\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("然后把可变的各自封装起来:")]),a._v(" "),s("p",[a._v("var Duck = function () {}\nDuck.prototype.sound = function () {\nconsole.log('嘎嘎嘎');\n};")]),a._v(" "),s("p",[a._v("var Chicken = function () {}\nChicken.prototype.sound = function () {\nconsole.log('咯咯咯');\n};")]),a._v(" "),s("p",[a._v("makeSound( new Duck())\nmakeSound( new Chicken())")]),a._v(" "),s("p",[a._v("当我们想加入新的动物时:")]),a._v(" "),s("p",[a._v("var Dog = function (){}")]),a._v(" "),s("p",[a._v("Dog.prototype.sound = function(){\nconsole.log('汪汪汪');\n};")]),a._v(" "),s("p",[a._v("makeSound( new Dog())")]),a._v(" "),s("h2",{attrs:{id:"_3-封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-封装"}},[a._v("#")]),a._v(" 3.封装")]),a._v(" "),s("p",[a._v("封装的目的是将信息隐藏。")]),a._v(" "),s("p",[a._v("使用时不需要关心其内部是怎么实现的,只要他提供的功能正确使用即可.")]),a._v(" "),s("p",[a._v("即便修改了其内部源代码,但只要对外接口或者调用方式及功能没有变化,用户就不需要关心其内部实现的改变.")]),a._v(" "),s("h2",{attrs:{id:"_4-继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-继承"}},[a._v("#")]),a._v(" 4.继承")]),a._v(" "),s("p",[a._v("通过【某种方式】让一个对象可以访问到另一个对象中的属性和方法，我们把这种方式称之为继承")]),a._v(" "),s("h1",{attrs:{id:"总结-javascript-面向对象的三大特征"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结-javascript-面向对象的三大特征"}},[a._v("#")]),a._v(" 总结 - JavaScript 面向对象的三大特征")]),a._v(" "),s("ul",[s("li",[a._v("封装")]),a._v(" "),s("li",[a._v("继承")]),a._v(" "),s("li",[a._v("多态")])])])}),[],!1,null,null,null);n.default=v.exports}}]);