(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{351:function(s,a,n){"use strict";n.r(a);var e=n(3),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),n("p",[s._v("正则表达的英文全程是regular expression,正如它的名字,可以将它分为两个部分来理解：")]),s._v(" "),n("p",[s._v("(1).第一部分是规则（regular）,用来约束各个字符的语义.")]),s._v(" "),n("p",[s._v("(2).第二部分是表达式（expression）,是由字符组成的字符串,用来规定匹配操作.")]),s._v(" "),n("h2",{attrs:{id:"作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[s._v("#")]),s._v(" 作用")]),s._v(" "),n("p",[s._v("匹配是正则表达式的基本行为,例如,利用正则表达式从字符串中找出符合规则的子字符串,如果有符合正则表达式规则的子字符串,那么此子字符串就是一个匹配.")]),s._v(" "),n("h2",{attrs:{id:"创建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[s._v("#")]),s._v(" 创建")]),s._v(" "),n("ul",[n("li",[s._v("字面量创建-使用两个斜杠（/）包裹规则即可创建一个RegExp对象直接量.最后一个斜杠后面可以规定修饰符.")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var reg = /web/i\n\nvar str = 'web前端';\n\nconsole.log(reg.test(str)) //true  str中可以存在web\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ul",[n("li",[s._v("对象创建-与其他对象类似，使用RegExp构造函数可以创建正则表达式对象实例.")])]),s._v(" "),n("p",[s._v("（1）.第一个参数规定了正则表达式匹配规则.")]),s._v(" "),n("p",[s._v("（2）.第二个参数可选，规定正则表达式修饰符.")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\nvar str = 'web前端';\n\nvar reg = new RegExp(\"web\",i)\n\nconsole.log(reg.test(str)) //true  str中可以存在web\n\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h2",{attrs:{id:"修饰符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[s._v("#")]),s._v(" 修饰符")]),s._v(" "),n("p",[s._v("用来规定正则表达式执行匹配的一些方式")]),s._v(" "),n("ul",[n("li",[s._v("采用直接量方式创建正则表达式，那么修饰符位于第二个斜杠后面。        /web/修饰符")]),s._v(" "),n("li",[s._v('构造函数方式创建正则表达式，修饰符可以作为构造函数的第二个参数传递。 new RegExp("web",修饰符)')])]),s._v(" "),n("h2",{attrs:{id:"i-不区分大小写"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#i-不区分大小写"}},[s._v("#")]),s._v(" i - 不区分大小写")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var str = 'Web前端';\nvar reg = /w/\nconsole.log(reg.test(str)) //false str不存在小写w\n\nvar str = 'Web前端';\nvar reg = /w/i\nconsole.log(reg.test(str)) //true str不存在w (i 不区分大小写)\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[n("font",{attrs:{color:"red"}},[n("b",[s._v("更多修饰符用法请点击查看修饰符章节")])])],1),s._v(" "),n("h2",{attrs:{id:"重复数量词"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重复数量词"}},[s._v("#")]),s._v(" 重复数量词")]),s._v(" "),n("ul",[n("li",[s._v("指明某个字符串匹配的次数")]),s._v(" "),n("li",[s._v("量词的通用形式为{m,n}，m,n为数字，限定字符组中字符存在的个数，闭区间，m为下限，n为上限。")])]),s._v(" "),n("h3",{attrs:{id:"例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[s._v("#")]),s._v(" 例子")]),s._v(" "),n("p",[s._v("获取一个匹配的数字9")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'1234567899999\'\nvar reg = /9/\nconsole.log(str.match(reg)) //["9", index: 8, input: "1234567899999", groups: undefined]\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("获取两个个匹配的数字9")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'1234567899999\'\nvar reg = /99/\nconsole.log(str.match(reg)) //["99", index: 8, input: "1234567899999", groups: undefined]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("不确定9的个数,取出连续的9的字符串")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'1234567899999\'\nvar reg = /9{1,} //一个到无穷个\nconsole.log(str.match(reg)) //["99999", index: 8, input: "1234567899999", groups: undefined]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("font",{attrs:{color:"red"}},[n("b",[s._v("更多量词用法请点击查看量词章节")])])],1),s._v(" "),n("h2",{attrs:{id:"字符类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字符类"}},[s._v("#")]),s._v(" 字符类 []")]),s._v(" "),n("p",[s._v("字符类是一个字符集，如果字符集中的任何一个字符有匹配，它就会找到该匹配项.")]),s._v(" "),n("ul",[n("li",[s._v("字符类可以匹配它所包含的任意一个字符.(一个字符类对应一个字符)")]),s._v(" "),n("li",[s._v("也就是说只要字符串中包含任意一个字符类的字符，那么就可以完成匹配")])]),s._v(" "),n("h3",{attrs:{id:"例子-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子-2"}},[s._v("#")]),s._v(" 例子")]),s._v(" "),n("p",[s._v("匹配所有数字")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'林先生: 88888888888,刘先生：999999999\'\n\nvar reg = /[1-9]/   // [1-9] 等价于 [123456789] 等价于 原字符\\d\n\n一个字符类对应一个字符,因此找到第一个数字8\n\nconsole.log(str.match(reg)) //["8", index: 5, input: "林先生: 88888888888,刘先生：999999999", groups: undefined]\n\n--------\n\nvar str = \'林先生: 88888888888,刘先生：999999999\'\n\nvar reg = /[1-9]+/ //与字符类匹配的多个连续字符\n\nconsole.log(str.match(reg)) //["88888888888", index: 5, input: "林先生: 88888888888,刘先生：999999999", groups: undefined]\n\n--------\nvar reg = /[1-9]/g  //全局匹配 字符类\n\nconsole.log(str.match(reg))\n\n//["8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "9", "9", "9", "9", "9", "9", "9", "9", "9"]\n--------\n\nvar str = \'林先生: 88888888888,刘先生：999999999\'\n\nvar reg = /[1-9]+/g //全局匹配 与字符类匹配的多个连续字符\n\nconsole.log(str.match(reg)) //["88888888888", "999999999"]\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("h3",{attrs:{id:"反字符类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反字符类"}},[s._v("#")]),s._v(" 反字符类")]),s._v(" "),n("p",[s._v("即对原先字符类取反")]),s._v(" "),n("p",[s._v("匹配所有非数字")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'林先生: 88888888888,刘先生：999999999\'\n\nvar reg = /[^1-9]/  \n\n一个字符类对应一个字符,因此找到第一个非数字字符\n\nconsole.log(str.match(reg)) //["林", index: 0, input: "林先生: 88888888888,刘先生：999999999", groups: undefined]\n\n--------\n\nvar str = \'林先生: 88888888888,刘先生：999999999\'\n\nvar reg = /[^1-9]+/ //与字符类匹配的多个连续非数字字符\n\nconsole.log(str.match(reg)) //["林先生: ", index: 0, input: "林先生: 88888888888,刘先生：999999999", groups: undefined]\n\n--------\nvar reg = /[^1-9]/g  //全局匹配 非数字字符\n\nconsole.log(str.match(reg))\n\n// ["林", "先", "生", ":", " ", ",", "刘", "先", "生", "："]\n--------\n\nvar str = \'林先生: 88888888888,刘先生：999999999\'\n\nvar reg = /[^1-9]+/g //全局匹配 与字符类匹配的多个连续非数字字符\n\nconsole.log(str.match(reg)) //["林先生: ", ",刘先生："]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("h2",{attrs:{id:"元字符-预定的义字符类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#元字符-预定的义字符类"}},[s._v("#")]),s._v(" 元字符 预定的义字符类")]),s._v(" "),n("p",[s._v("例子 \\d 功能等价于[0-9]]")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'林先生: 88888888888,刘先生：999999999\'\n\nvar reg = /\\d/  \n\nconsole.log(str.match(reg)) //["8", index: 5, input: "林先生: 88888888888,刘先生：999999999", groups: undefined]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("font",{attrs:{color:"red"}},[n("b",[s._v("更多元字符请点击查看元字符章节")])])],1),s._v(" "),n("h2",{attrs:{id:"分组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分组"}},[s._v("#")]),s._v(" 分组")])])}),[],!1,null,null,null);a.default=r.exports}}]);