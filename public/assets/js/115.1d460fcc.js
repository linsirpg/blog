(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{453:function(s,a,n){"use strict";n.r(a);var e=n(3),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),n("p",[s._v("正则表达的英文全程是regular expression,正如它的名字,可以将它分为两个部分来理解：")]),s._v(" "),n("p",[s._v("(1).第一部分是规则（regular）,用来约束各个字符的语义.")]),s._v(" "),n("p",[s._v("(2).第二部分是表达式（expression）,是由字符组成的字符串,用来规定匹配操作.")]),s._v(" "),n("h2",{attrs:{id:"作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[s._v("#")]),s._v(" 作用")]),s._v(" "),n("p",[s._v("匹配是正则表达式的基本行为,例如,利用正则表达式从字符串中找出符合规则的子字符串,如果有符合正则表达式规则的子字符串,那么此子字符串就是一个匹配.")]),s._v(" "),n("h2",{attrs:{id:"创建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[s._v("#")]),s._v(" 创建")]),s._v(" "),n("ul",[n("li",[s._v("字面量创建-使用两个斜杠（/）包裹规则即可创建一个RegExp对象直接量.最后一个斜杠后面可以规定修饰符.")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var reg = /web/i\n\nvar str = 'web前端';\n\nconsole.log(reg.test(str)) //true  str中可以存在web\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ul",[n("li",[s._v("对象创建-与其他对象类似,使用RegExp构造函数可以创建正则表达式对象实例.")])]),s._v(" "),n("p",[s._v("（1）.第一个参数规定了正则表达式匹配规则.")]),s._v(" "),n("p",[s._v("（2）.第二个参数可选,规定正则表达式修饰符.")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\nvar str = 'web前端';\n\nvar reg = new RegExp(\"web\",i)\n\nconsole.log(reg.test(str)) //true  str中可以存在web\n\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h2",{attrs:{id:"选择项"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#选择项"}},[s._v("#")]),s._v(" 选择项")]),s._v(" "),n("p",[s._v("｜或")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("使用竖杠定义选项。")])]),s._v(" "),n("li",[n("p",[s._v("竖杠两侧是具体选项内容。")])]),s._v(" "),n("li",[n("p",[s._v("可以一次定义多个选项,比如a|b|c|d。")])]),s._v(" "),n("li",[n("p",[s._v("从左到右尝试匹配,直到发现匹配成功的选项")])]),s._v(" "),n("li",[n("p",[s._v("一旦发现有匹配成功的选项,那么立即终止对其他选项的尝试,")])])]),s._v(" "),n("h3",{attrs:{id:"例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[s._v("#")]),s._v(" 例子")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'web前端\'\n\nconsole.log(str.match(/web|前端/))\n\x3c!-- \n["web", index: 0, input: "web前端", groups: undefined] --\x3e\n\nconsole.log(str.match(/web2|前端/))\n\x3c!-- \n["前端", index: 3, input: "web前端", groups: undefined]--\x3e\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h2",{attrs:{id:"修饰符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[s._v("#")]),s._v(" 修饰符")]),s._v(" "),n("p",[s._v("用来规定正则表达式执行匹配的一些方式")]),s._v(" "),n("ul",[n("li",[s._v("采用直接量方式创建正则表达式,那么修饰符位于第二个斜杠后面。        /web/修饰符")]),s._v(" "),n("li",[s._v('构造函数方式创建正则表达式,修饰符可以作为构造函数的第二个参数传递。 new RegExp("web",修饰符)')])]),s._v(" "),n("h3",{attrs:{id:"i-不区分大小写"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#i-不区分大小写"}},[s._v("#")]),s._v(" i - 不区分大小写")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var str = 'Web前端';\nvar reg = /w/\nconsole.log(reg.test(str)) //false str不存在小写w\n\nvar str = 'Web前端';\nvar reg = /w/i\nconsole.log(reg.test(str)) //true str不存在w (i 不区分大小写)\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[n("font",{attrs:{color:"red"}},[n("b",[s._v("更多修饰符用法请点击查看修饰符章节")])])],1),s._v(" "),n("h2",{attrs:{id:"重复数量词"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重复数量词"}},[s._v("#")]),s._v(" 重复数量词")]),s._v(" "),n("ul",[n("li",[s._v("指明某个字符串匹配的次数")]),s._v(" "),n("li",[s._v("量词的通用形式为{m,n},m,n为数字,限定字符组中字符存在的个数,闭区间,m为下限,n为上限。")])]),s._v(" "),n("h3",{attrs:{id:"例子-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子-2"}},[s._v("#")]),s._v(" 例子")]),s._v(" "),n("p",[s._v("获取一个匹配的数字9")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'1234567899999\'\nvar reg = /9/\nconsole.log(str.match(reg)) //["9", index: 8, input: "1234567899999", groups: undefined]\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("获取两个个匹配的数字9")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'1234567899999\'\nvar reg = /99/\nconsole.log(str.match(reg)) //["99", index: 8, input: "1234567899999", groups: undefined]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("不确定9的个数,取出连续的9的字符串")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'1234567899999\'\nvar reg = /9{1,} //一个到无穷个\nconsole.log(str.match(reg)) //["99999", index: 8, input: "1234567899999", groups: undefined]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("font",{attrs:{color:"red"}},[n("b",[s._v("更多量词用法请点击查看量词章节")])])],1),s._v(" "),n("h2",{attrs:{id:"字符类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字符类"}},[s._v("#")]),s._v(" 字符类 []")]),s._v(" "),n("p",[s._v("字符类是一个字符集,如果字符集中的任何一个字符有匹配,它就会找到该匹配项.")]),s._v(" "),n("ul",[n("li",[s._v("字符类可以匹配它所包含的任意一个字符.(一个字符类对应一个字符)")]),s._v(" "),n("li",[s._v("也就是说只要字符串中包含任意一个字符类的字符,那么就可以完成匹配")])]),s._v(" "),n("h3",{attrs:{id:"例子-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子-3"}},[s._v("#")]),s._v(" 例子")]),s._v(" "),n("p",[s._v("匹配所有数字")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'林先生: 88888888888,刘先生：999999999\'\n\nvar reg = /[1-9]/   // [1-9] 等价于 [123456789] 等价于 原字符\\d\n\n一个字符类对应一个字符,因此找到第一个数字8\n\nconsole.log(str.match(reg)) //["8", index: 5, input: "林先生: 88888888888,刘先生：999999999", groups: undefined]\n\n--------\n\nvar str = \'林先生: 88888888888,刘先生：999999999\'\n\nvar reg = /[1-9]+/ //与字符类匹配的多个连续字符\n\nconsole.log(str.match(reg)) //["88888888888", index: 5, input: "林先生: 88888888888,刘先生：999999999", groups: undefined]\n\n--------\nvar reg = /[1-9]/g  //全局匹配 字符类\n\nconsole.log(str.match(reg))\n\n//["8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "9", "9", "9", "9", "9", "9", "9", "9", "9"]\n--------\n\nvar str = \'林先生: 88888888888,刘先生：999999999\'\n\nvar reg = /[1-9]+/g //全局匹配 与字符类匹配的多个连续字符\n\nconsole.log(str.match(reg)) //["88888888888", "999999999"]\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("h3",{attrs:{id:"反字符类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反字符类"}},[s._v("#")]),s._v(" 反字符类")]),s._v(" "),n("p",[s._v("即对原先字符类取反")]),s._v(" "),n("p",[s._v("匹配所有非数字")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'林先生: 88888888888,刘先生：999999999\'\n\nvar reg = /[^1-9]/  \n\n一个字符类对应一个字符,因此找到第一个非数字字符\n\nconsole.log(str.match(reg)) //["林", index: 0, input: "林先生: 88888888888,刘先生：999999999", groups: undefined]\n\n--------\n\nvar str = \'林先生: 88888888888,刘先生：999999999\'\n\nvar reg = /[^1-9]+/ //与字符类匹配的多个连续非数字字符\n\nconsole.log(str.match(reg)) //["林先生: ", index: 0, input: "林先生: 88888888888,刘先生：999999999", groups: undefined]\n\n--------\nvar reg = /[^1-9]/g  //全局匹配 非数字字符\n\nconsole.log(str.match(reg))\n\n// ["林", "先", "生", ":", " ", ",", "刘", "先", "生", "："]\n--------\n\nvar str = \'林先生: 88888888888,刘先生：999999999\'\n\nvar reg = /[^1-9]+/g //全局匹配 与字符类匹配的多个连续非数字字符\n\nconsole.log(str.match(reg)) //["林先生: ", ",刘先生："]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("h2",{attrs:{id:"元字符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[s._v("#")]),s._v(" 元字符")]),s._v(" "),n("p",[s._v("预定的义字符类")]),s._v(" "),n("p",[s._v("例子 \\d 功能等价于[0-9]]")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'林先生: 88888888888,刘先生：999999999\'\n\nvar reg = /\\d/  \n\nconsole.log(str.match(reg)) //["8", index: 5, input: "林先生: 88888888888,刘先生：999999999", groups: undefined]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("font",{attrs:{color:"red"}},[n("b",[s._v("更多元字符请点击查看元字符章节")])])],1),s._v(" "),n("h2",{attrs:{id:"分组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分组"}},[s._v("#")]),s._v(" 分组")]),s._v(" "),n("p",[s._v("由一对小括号生成,可以将小括号中的内容作为一个独立整体处理")]),s._v(" "),n("h3",{attrs:{id:"例子-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子-4"}},[s._v("#")]),s._v(" 例子")]),s._v(" "),n("p",[s._v("匹配 www")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'www.pgboyboy.com\'\nconsole.log(str.match(/w+/))\n\x3c!-- ["www", index: 0, input: "www.pgboyboy.com", groups: undefined] --\x3e\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("匹配boyboy")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('//错误写法  /boy{2}/ 匹配的是 /boyy/\nconsole.log(str.match(/boy{2}/))\n\x3c!-- null --\x3e\n\n// 正确写法  将boy看成一个独立的整体 量词针对整个组\nconsole.log(str.match(/(boy){2}/))\n\x3c!-- ["boyboy", "boy", index: 6, input: "www.pgboyboy.com", groups: undefined] --\x3e\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"捕获分组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#捕获分组"}},[s._v("#")]),s._v(" 捕获分组")]),s._v(" "),n("p",[s._v("分组-正则匹配的子表达式")]),s._v(" "),n("p",[s._v("括号（） 不仅仅能把又联系的元素归拢起来并且分组,当使用括号后,正则表达式会保存每个分组真正匹配的文本,匹配完成后,可以通过某些方式获取组的内容并且使用.")]),s._v(" "),n("p",[s._v("分组捕获到的字符串会从1开始编号")]),s._v(" "),n("p",[s._v("使用$1 获取第一个捕获的分分组, $2 获取第二个捕获的分组 以此类推")]),s._v(" "),n("p",[s._v("match()的非全局匹配与exec()可以体现分组捕获保持的数据")]),s._v(" "),n("p",[s._v("两者都返回一个数组对象,匹配到的内容（存储在数字第一个元素）,第二个元素存储第一个子表达式匹配到的内容,第三个元素存储第二个子表达式匹配到的内容,以此类推。")]),s._v(" "),n("p",[s._v("例子")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'2020-05-29\';\nvar result = str.match(/(\\d*)-(\\d*)-(\\d*)/)\nconsole.log(result)\n\n\x3c!-- \n["2020-05-29", "2020", "05", "29", index: 0, input: "2020-05-29", groups: undefined] \nresult[0] = RegExp.$1\nresult[1] = RegExp.$2\nresult[2] = RegExp.$3\n--\x3e\n\nconsole.log((/(\\d*)-(\\d*)-(\\d*)/).exec(str))\n\x3c!-- ["2020-05-29", "2020", "05", "29", index: 0, input: "2020-05-29", groups: undefined] --\x3e\n\nconsole.log(RegExp.$1) //2020\n\nconsole.log(RegExp.$2) //05\n\nconsole.log(RegExp.$3) //29\n\n日期格式转换\nvar str = \'2020-02-29\'\n\nconsole.log(str.replace(/(\\d*)-(\\d*)-(\\d*)/, \'$1/$2/$3\')) //2020/02/29\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("h2",{attrs:{id:"反向引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反向引用"}},[s._v("#")]),s._v(" 反向引用")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("正则表达式里也能进行引用,这称为反向引用")])]),s._v(" "),n("li",[n("p",[s._v("反向引用是引用的分组匹配的值")])]),s._v(" "),n("li",[n("p",[s._v("使用 \\1 代表第一个匹配的分组, \\2 代表第二个 匹配的分组 以此类推")])])]),s._v(" "),n("p",[s._v("例子\n找出DOM中的每个元素")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var html = \'<h1>web</h1><h2>前端</h2><h3>工程师</h3><div></div>\'\n\n\x3c!-- \\1 代表 分组(.+) 匹配的值 \\1 第一个匹配等于 h1 --\x3e\nconsole.log(html.match(/<(.+)>([\\s\\S]*)<\\/\\1>/))\n\x3c!-- \n["<h1>web</h1>", "h1", "web", index: 0, input: "<h1>web</h1><h2>前端</h2><h3>工程师</h3><div></div>", groups: undefined]\n --\x3e\n\n\x3c!-- 全局匹配  \\1 依此次等于 h1 h2 h3 div --\x3e\nconsole.log(html.match(/<(.+)>([\\s\\S]*)<\\/\\1>/g))\n\x3c!-- \n["<h1>web</h1>", "<h2>前端</h2>", "<h3>工程师</h3>", "<div></div>"]\n --\x3e\n\n//不使用反向引用\nconsole.log(html.match(/<(.+)>([\\s\\S]*)<\\/(.+)>/g))\n\x3c!-- \n["<h1>web</h1><h2>前端</h2><h3>工程师</h3><div></div>"]\n --\x3e\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("h2",{attrs:{id:"非捕获性分组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#非捕获性分组"}},[s._v("#")]),s._v(" 非捕获性分组")]),s._v(" "),n("p",[s._v("不捕获分组真正匹配的文本 ?:")]),s._v(" "),n("p",[s._v("例子")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'2020-05-29\';\n\n// 不捕获年份\nconsole.log(str.match(/(?:\\d*)-(\\d*)-(\\d*)/))\n\x3c!--  ["2020-05-29", "05", "29", index: 0, input: "2020-05-29", groups: undefined] --\x3e\n\nconsole.log((/(?:\\d*)-(\\d*)-(\\d*)/).exec(str))\n\x3c!--  ["2020-05-29", "05", "29", index: 0, input: "2020-05-29", groups: undefined] --\x3e\n\nconsole.log(RegExp.$1) //05\nconsole.log(RegExp.$2) // 29\nconsole.log(RegExp.$3)  // 空\n--\x3e\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h2",{attrs:{id:"命名分组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#命名分组"}},[s._v("#")]),s._v(" 命名分组")]),s._v(" "),n("p",[s._v("给需要给分组里面一个命名标识 (?<名称>)")]),s._v(" "),n("p",[s._v("可用通过 exec()与match()方法的groups对应组名访问捕获的字符串")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'2020-05-29\';\nvar result = str.match(/(?<year>\\d*)-(?<month>\\d*)-(?<day>\\d*)/)\nconsole.log(result.groups)\n\x3c!-- {year: "2020", month: "05", day: "29"} --\x3e\n\n\nvar str = \'2020-05-29\';\nvar result = /(?<year>\\d*)-(?<month>\\d*)-(?<day>\\d*)/.exec(str)\nconsole.log(result.groups)\n\x3c!-- {year: "2020", month: "05", day: "29"} --\x3e\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("在replace中使用 通过$<组名访问>")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var str = '2020-05-29';\nconsole.log(str.replace(/(?<year>\\d*)-(?<month>\\d*)-(?<day>\\d*)/, '$<year>/$<month>/$<day>')) //2020/05/29\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h2",{attrs:{id:"贪婪与非贪婪匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#贪婪与非贪婪匹配"}},[s._v("#")]),s._v(" 贪婪与非贪婪匹配")]),s._v(" "),n("p",[s._v("婪模式在整个表达式匹配成功的前提下，尽可能多的匹配，而非贪婪模式在整个表达式匹配成功的前提下，尽可能少的匹配。")]),s._v(" "),n("p",[s._v("属于贪婪模式的量词，也叫做匹配优先量词，包括： {m,n}、{m,}、?、*和+")]),s._v(" "),n("p",[s._v("非贪婪模式的量词 匹配优先量词后加上? {m,n}?、{m,}?、??、*?和+?")]),s._v(" "),n("p",[s._v("贪婪模式")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var html = \'<h1>web</h1><h2>前端</h2><h1>工程师</h1>\'\nconsole.log(html.match(/<(h[1-9])>([\\s\\S]+)<\\/\\1>/i))\n\x3c!-- \n["<h1>web</h1><h2>前端</h2><h1>工程师</h1>", "h1", "web</h1><h2>前端</h2><h1>工程师", index: 0, input: "<h1>web</h1><h2>前端</h2><h1>工程师</h1>", groups: undefined]\n\n贪婪模式,就是在整个表达式匹配成功的前提下,尽可能多的匹配.所以会一直匹配到最后一个h1\n --\x3e\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("非贪婪模式")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var html = \'<h1>web</h1><h2>前端</h2><h1>工程师</h1>\'\nconsole.log(html.match(/<(h[1-9])>([\\s\\S]+?)<\\/\\1>/i))\n\x3c!-- \n["<h1>web</h1>", "h1", "web", index: 0, input: "<h1>web</h1><h2>前端</h2><h1>工程师</h1>", groups: undefined]\n非贪婪模式,就是在整个表达式匹配成功的前提下,尽可能少的匹配，也就是所谓的“非贪婪”.所以当匹配到第一个闭合h1时,匹配成功.\n --\x3e\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h2",{attrs:{id:"转义字符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#转义字符"}},[s._v("#")]),s._v(" 转义字符")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("将字符原本的意义转换为其他意义")])]),s._v(" "),n("li",[n("p",[s._v("转义字符以反斜杠开头,后面跟着一个或者多个普通字符")])])]),s._v(" "),n("p",[s._v("例子\n匹配字符串中的 . 找到其位置")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//错误写法\nvar str = 'https://pgboy.com'\nconsole.log(str.match(/./))\n\x3c!-- \n[\"h\", index: 0, input: \"https://pgboy.com\", groups: undefined] \n元字符 . 匹配除了回车符(\\r)和换行符(\\n)以外的字符\n所以第一个匹配到的是 字符串 h\n--\x3e\n\n\n//正确写法\nvar str = 'https://pgboy.com'\nconsole.log(str.match(/\\./))\n\x3c!--\n[\".\", index: 13, input: \"https://pgboy.com\", groups: undefined]\n使用\\ 转义 将 元字符. 转义为普通的字符串.\n --\x3e\n\n\n对象创建使用某些原字符 需要转义\n\n\\d 匹配 [0-9]\nconsole.log('\\d') // d 所以/d在字符串中等于字符串d\nconsole.log('\\\\d') // \\d  要加上\\进行转义 \n\nvar reg = new RegExp('\\\\d+') \nvar str = 'web333'\nconsole.log(str.match(reg))\n\x3c!-- [\"333\", index: 3, input: \"web333\", groups: undefined] --\x3e\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("h2",{attrs:{id:"断言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#断言"}},[s._v("#")]),s._v(" 断言")]),s._v(" "),n("p",[s._v("常见的断言有三类: 单词边界、行起始/结束位置、环视")]),s._v(" "),n("h3",{attrs:{id:"单词边界"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单词边界"}},[s._v("#")]),s._v(" 单词边界")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("\\b匹配单词边界,换句话说,\\b是匹配一个位置,这个位置位于一个能够用来构成单词的字符")])]),s._v(" "),n("li",[n("p",[n("font",{attrs:{color:"red"}},[s._v("(字母、数字和下划线，也就是\\w相匹配的字符)")]),s._v("和一个不能用来构成单词的字符(也就是与"),n("font",{attrs:{color:"red"}},[s._v("\\W")]),s._v("相匹配的字符)之间。")],1)]),s._v(" "),n("li",[n("p",[s._v("单词两边都不设置边界")])]),s._v(" "),n("li",[n("p",[s._v("单词两边都设置边界")])]),s._v(" "),n("li",[n("p",[s._v("左边设置边界")])]),s._v(" "),n("li",[n("p",[s._v("右边设置边界")])])]),s._v(" "),n("h3",{attrs:{id:"例子-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子-5"}},[s._v("#")]),s._v(" 例子")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var str = 'the cat scattered his food catch mcat'\n\nconsole.log(str.replace(/cat/g, 'animal'))\n\x3c!-- the animal sanimaltered his food animalch manimal --\x3e\n\nconsole.log(str.replace(/\\bcat\\b/g, 'animal'))\n\x3c!-- the animal scattered his food catch mcat --\x3e\n\n\n注意 \\w与\\W的字符串之间就存在边界\n\nvar str = 'the (cat) scattered his food catch mcat'\nconsole.log(str.replace(/\\bcat\\b/g, 'animal'))\n\x3c!-- the (animal) scattered his food catch mcat --\x3e\n\nvar str = 'the _cat scattered his food catch mcat'\nconsole.log(str.replace(/\\bcat\\b/g, 'animal'))\n\x3c!-- the _cat scattered his food catch mcat --\x3e\n\nvar str = 'the cat猫 scattered his food catch mcat'\nconsole.log(str.replace(/\\bcat\\b/g, 'animal'))\n\x3c!-- the animal猫 scattered his food catch mcat --\x3e\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("h3",{attrs:{id:"起始行-结束位置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#起始行-结束位置"}},[s._v("#")]),s._v(" 起始行/结束位置")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[s._v("元字符")]),s._v(" "),n("th",[s._v("描述")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("^")]),s._v(" "),n("td",[s._v("元字符匹配一个字符串的起始位置")])]),s._v(" "),n("tr",[n("td",[s._v("$")]),s._v(" "),n("td",[s._v("元字符可以匹配字符串的结尾")])])])]),s._v(" "),n("p",[s._v("例子\n匹配字符串是否为日期格式")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var str = '2020-05-29';\nvar result = /\\d{4}([-\\/])\\d{2}\\1\\d{2}/.exec(str)\nconsole.log(result)\n\x3c!-- \n[\"2020-05-29\", \"-\", index: 0, input: \"2020-05-29\", groups: undefined]\n --\x3e\n\nvar str = '日期:2020-05-29日期';\nvar result = /\\d{4}([-\\/])\\d{2}\\1\\d{2}/.test(str)\nconsole.log(result) // true\n\x3c!-- \n不是一个日期格式的字符串,但还是匹配成功了\n --\x3e\n\n\n\nvar str = '32020-05-292';\nvar result = /\\d{4}([-\\/])\\d{2}\\1\\d{2}/.test(str)\nconsole.log(result) // true\n\x3c!-- \n不是一个日期格式的字符串,但还是匹配成功了\n --\x3e\n\n\n\x3c!-- 必须加上起始结束位置限定 起始跟结束必须为数字 --\x3e\n\nvar str = '日期:2020-05-29日期';\nvar result = /^\\d{4}([-\\/])\\d{2}\\1\\d{2}&/.test(str)\nconsole.log(result) // false\n\nvar str = '32020-05-292';\nvar result = /^\\d{4}([-\\/])\\d{2}\\1\\d{2}&/.test(str)\nconsole.log(result) // false\n\x3c!-- \n不是一个日期格式的字符串,但还是匹配成功了\n --\x3e\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br")])]),n("h3",{attrs:{id:"环视-零宽断言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#环视-零宽断言"}},[s._v("#")]),s._v(" 环视 - 零宽断言")]),s._v(" "),n("p",[s._v("正则表达式中，用于查找某些内容之前或者之后的东西，叫做环视。")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[s._v("类型")]),s._v(" "),n("th",[s._v("含义")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("(?=内容)")]),s._v(" "),n("td",[s._v("后面等于内容")])]),s._v(" "),n("tr",[n("td",[s._v("(?!内容)")]),s._v(" "),n("td",[s._v("后面不等于内容")])]),s._v(" "),n("tr",[n("td",[s._v("(?=<内容)")]),s._v(" "),n("td",[s._v("前面等于内容")])]),s._v(" "),n("tr",[n("td",[s._v("(?<!内容)")]),s._v(" "),n("td",[s._v("前面不等于内容")])])])]),s._v(" "),n("p",[s._v("例子")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'javaEE javaScript java\'\n\nconsole.log(str.match(/java/g))\n\x3c!--  ["java", "java", "java"] --\x3e\n\n//后面为Script的java (?=内容)\nconsole.log(str.match(/java(?=Script)/g))\n\x3c!--  ["java"]  javaScript --\x3e\n\n//后面不为Script 的java (?!内容) \nconsole.log(str.match(/java(?!Script)/g))\n\x3c!-- ["java", "java"] javaEE java --\x3e\n\n--------\n\nvar str = \'Script javaScript \'\n\nconsole.log(str.match(/Script/g))\n\x3c!-- ["Script", "Script"] --\x3e\n\n// 前面为java的Script (?=<内容)\nconsole.log(str.match(/(?<=java)Script/g))\n\x3c!-- ["Script"] javaScript --\x3e\n\n//前面不为java的Script (?<!内容)\nconsole.log(str.match(/(?<!java)Script/g))\n\x3c!-- ["Script"] Script  --\x3e\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("p",[s._v("以上例子如有疑问,可以通过 match()方法 不全局匹配模式下查看index的值")]),s._v(" "),n("ul",[n("li",[s._v("找出所以a标签herf的值")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = "<div><a href=\'https://www.baidu.com\'>百度</a><a href=\'https://github.com/\'>github</a></div>"\nconsole.log(str.match(/(?<=href=([\'"])).+?(?=\\1)/g))\n\x3c!-- ["https://www.baidu.com", "https://github.com/"] --\x3e\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("模糊手机号后4位")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'林先生: 13636363632,李先生: 15858587878\'\n\nconsole.log(str.match(/(?<=\\d{7})\\d{4}/g))\n\x3c!--  ["3632", "7878"] --\x3e\n\nvar result = str.replace(/(?<=\\d{7})\\d{4}/g, v => {\n  return "*".repeat(4)\n})\nconsole.log(result)\n\x3c!-- 林先生: 1363636****,李先生: 1585858**** --\x3e\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);