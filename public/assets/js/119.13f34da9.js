(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{345:function(s,e,a){"use strict";a.r(e);var t=a(3),r=Object(t.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),a("p",[s._v("正则表达的英文全程是regular expression,正如它的名字,可以将它分为两个部分来理解：")]),s._v(" "),a("p",[s._v("(1).第一部分是规则（regular）,用来约束各个字符的语义。")]),s._v(" "),a("p",[s._v("(2).第二部分是表达式（expression）,是由字符组成的字符串,用来规定匹配操作。")]),s._v(" "),a("h2",{attrs:{id:"作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[s._v("#")]),s._v(" 作用")]),s._v(" "),a("p",[s._v("匹配是正则表达式的基本行为,例如,利用正则表达式从字符串中找出符合规则的子字符串,如果有符合正则表达式规则的子字符串,那么此子字符串就是一个匹配。")]),s._v(" "),a("h2",{attrs:{id:"创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[s._v("#")]),s._v(" 创建")]),s._v(" "),a("ul",[a("li",[s._v("字面量创建-使用两个斜杠（/）包裹规则即可创建一个RegExp对象直接量。最后一个斜杠后面可以规定修饰符.")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\\web\\g\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("对象创建-与其他对象类似，使用RegExp构造函数可以创建正则表达式对象实例。")])]),s._v(" "),a("p",[s._v("（1）.第一个参数规定了正则表达式匹配规则。")]),s._v(" "),a("p",[s._v("（2）.第二个参数可选，规定正则表达式修饰符。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var str=\"Web前端\"\n\nvar Reg = new RegExp('web',i)\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])}),[],!1,null,null,null);e.default=r.exports}}]);