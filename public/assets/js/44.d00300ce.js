(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{378:function(a,s,n){"use strict";n.r(s);var r=n(3),t=Object(r.a)({},(function(){var a=this,s=a.$createElement,n=a._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h2",{attrs:{id:"题目描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[a._v("#")]),a._v(" 题目描述")]),a._v(" "),n("p",[a._v("给你一个 m * n 的矩阵，矩阵中的数字 各不相同 。请你按 任意 顺序返回矩阵中的所有幸运数。")]),a._v(" "),n("p",[a._v("幸运数是指矩阵中满足同时下列两个条件的元素：")]),a._v(" "),n("p",[a._v("在同一行的所有元素中最小\n在同一列的所有元素中最大")]),a._v(" "),n("h2",{attrs:{id:"例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[a._v("#")]),a._v(" 例子")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v(" 输入：matrix = [[3,7,8],[9,11,13],[15,16,17]]\n输出：[15]\n解释：15 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("输入：matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]\n输出：[12]\n解释：12 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("h2",{attrs:{id:"解题方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解题方法"}},[a._v("#")]),a._v(" 解题方法")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("/**\n * @param {number[][]} matrix\n * @return {number[]}\n */\nvar luckyNumbers = function (matrix) {\n  for (var i = 0; i < matrix.length; i++) {\n    var arr = [...matrix[i]].sort(function (a, b) { return a - b })\n    var index = matrix[i].indexOf(arr[0]);\n    var arr1 = [];\n    for (var j = 0; j < matrix.length; j++) {\n      arr1.push(matrix[j][index]);\n    }\n    arr1.sort(function (a, b) { return b - a })\n    if (arr1[0] == arr[0]) {\n      return [arr1[0]]\n    }\n  }\n  return []\n};\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br")])]),n("h2",{attrs:{id:"解题思路"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解题思路"}},[a._v("#")]),a._v(" 解题思路")]),a._v(" "),n("p",[a._v("1.取出每一行中最小的值\n2.通过行中的最小值的索引,获取对应每一列中的最大值\n3.判断两者是否相等,相等即为幸运数字")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var luckyNumbers = function (matrix) {\n  //循环矩阵中的每一行\n  for (var i = 0; i < matrix.length; i++) {\n    //不影响原数组的顺序,将原数组排序赋值给新的数组\n    var arr = [...matrix[i]].sort(function (a, b) { return a - b })\n    //获取每一行中最小值的位置\n    var index = matrix[i].indexOf(arr[0]);\n    var arr1 = [];\n\n    //获取最小行对应的列的值的集合\n    for (var j = 0; j < matrix.length; j++) {\n      arr1.push(matrix[j][index]);\n    }\n    //对列的集合进行倒序\n    arr1.sort(function (a, b) { return b - a })\n    //判断最大值跟最小值是否相等\n    if (arr1[0] == arr[0]) {\n      return [arr1[0]]\n    }\n  }\n  return []\n};\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);